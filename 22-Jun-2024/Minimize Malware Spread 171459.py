# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class UnionFind:
    def __init__(self, total):
        self.parent = {i:i for i in range(total)}
        self.size = [1] * (total)
    
    def find(self, x):
        while x != self.parent[x]:
            self.parent[x] = self.parent[self.parent[x]]
            x = self.parent[x]
        return x

    
    def union(self, x , y):
        parentX = self.find(x)
        parentY = self.find(y)
        if parentX == parentY:return 
        if parentX>parentY: 
            self.size[parentX] += self.size[parentY]
            self.parent[parentY] = parentX 

        else:
            self.size[parentY] += self.size[parentX] 
            self.parent[parentX] = parentY  


   
            
        
        
        

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n,dis = len(graph),UnionFind(len(graph))
        initial.sort()
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                if graph[i][j]:dis.union(i,j)
        ans,size = initial[0],0
        for i in initial:
            for j in initial:
                if i!=j and dis.find(i)==dis.find(j) :
                    break
            else:
                if size <dis.size[dis.find(i)]:
                    size,ans = dis.size[dis.find(i)],i
        return ans 

